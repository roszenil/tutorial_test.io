################################################################################
#
# RevBayes Example: Inferring a Phylogeny of Fossil Echinoderms Using the Mk Model
#
# This file: Specifies the discretized morphological substitution model  ...
#
# authors:  April M. Wright, Michael J. Landis, Sebastian Höhna, David Černý
#
################################################################################
################################################################################

# Draw the concentration parameter of the Dirichlet distribution of equilibrium state
# frequencies from an exponential hyperprior, and place a move on it.
dir_alpha ~ dnExponential( 1.0 )
moves.append( mvSlice(dir_alpha, weight=5.0 ) )

# Set up gamma-distributed rate variation.
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Move on the shape parameter of the gamma distribution.
moves.append( mvSlice(alpha_morpho, weight=2.0) )

# How many distinct rate matrices we want in the mixture. Note that since we have to
# create a symmetric counterpart for each matrix, the total number is going to equal
# twice the value specified below.
n_cats = 3

n_max_states <- 7
idx = 1

for (i in 2:n_max_states) {
    morpho_bystate[i - 1] <- morpho                             # make local tmp copy of data
    morpho_bystate[i - 1].setNumStatesPartition(i)              # only keep character blocks with state space equal to size i
    nc = morpho_bystate[i - 1].nchar()                          # get number of characters per character size with i-sized states
    if (nc > 0) {
        print("There are "+nc+" characters with "+i+" states.")
        # Place a symmetric Dirichlet prior on the equilibrium state frequencies
        pi_prior[idx] := rep(dir_alpha, i)

        for (j in 1:n_cats) {
            # Draw a vector of equilibrium state frequencies from the specified prior
            pi[idx][j] ~ dnDirichlet(pi_prior[idx])
            moves.append( mvSimplexElementScale(pi[idx][j], alpha=10, weight=1.0) )

            # Reverse the pi[idx][j] vector

            upper = pi[idx][j].size()
            for (k in 1:upper) {
                ind = upper + 1 - k
                rev_pi[idx][j][k] <- pi[idx][j][ind]
            }
            
            # Create i-by-i rate matrices from both the original and reversed state
            # frequency vectors.

            Q[idx][2*j - 1] := fnF81(pi[idx][j])
            # Need to apply simplex() to convert rev_pi[idx][j] from type Probability[]
            Q[idx][2*j] := fnF81(simplex(rev_pi[idx][j]))
        }

        print("The mixture contains "+Q[idx].size()+" rate matrices:")
        for (l in 1:Q[idx].size()) {
            print(" ")
            Q[idx][l]
        }
        
        # Tell the model what the probability of a character going into any particular
        # category of the rate matrix mixture. The flat Dirichlet prior used here says
        # that a character is equally likely to be put into any category.

        mat_prior[idx] <- rep(1, 2*n_cats)
        matrix_probs[idx] ~ dnDirichlet(mat_prior[idx])
        
        # Place move on the category assignment probabilities
        moves.append( mvBetaSimplex(matrix_probs[idx], weight=3.0) )
        moves.append( mvDirichletSimplex(matrix_probs[idx], weight=1.5) )
        
        # Combine all of our elements into a CTMC. Because we have not observed any
        # invariant sites, we specify the coding as 'variable'. Note that we are now
        # feeding the site matrices to the CTMC.

        m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q[idx],
                                   type="Standard", siteMatrices=matrix_probs[idx])
        # Clamp to the data
        m_morph[idx].clamp(morpho_bystate[i - 1])

        idx = idx + 1                                            # increment counter
    }
}
