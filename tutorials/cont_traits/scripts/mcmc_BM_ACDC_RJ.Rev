################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   accelerating/decelerating-rate Brownian-motion model
#
#
# authors: Michael R. May
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the dataset to analyze
dataset <- 2

### Read in the trees
T <- readTrees("data/trees.nex")[dataset]

### Read in the character data
data <- readContinuousCharacterData("data/traits.nex")[dataset]

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T

##########################
# Specify the rate model #
##########################

initial_time := tree.rootAge()

sigma2 ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(sigma2, weight=1.0) )

# lambda ~ dnLaplace(0, 0.01)
lambda ~ dnUniform(-1, 1)
moves.append( mvSlide(lambda, delta=0.1, weight=1.0) )

is_time_dependent ~ dnBernoulli(0.5)
moves.append( mvRandomIntegerWalk(is_time_dependent, weight=1.0) )

moves.append( mvUpDownSlide(weight=0.5) )
moves[moves.size()].addVariable(sigma2, up=true)
moves[moves.size()].addVariable(lambda, up=false)

real_lambda := is_time_dependent * lambda

# lambda ~ dnReversibleJumpMixture( 0.0, dnLaplace(0, 0.1), 0.5 )
# moves.append( mvRJSwitch(lambda, weight=2.0) )
# moves.append( mvSlide(lambda, weight=1.0) )
#
# is_time_dependent := ifelse(lambda == 0, 0, 1)

############################
# Compute the branch-rates #
############################

num_tips     <- tree.ntips()
num_branches <- 2 * num_tips - 2

for(i in 1:num_branches) {
    # branch_rates[i] := ifelse(is_time_dependent == 0, sigma2, sigma2 * (exp(lambda * (initial_time - tree.nodeAge(i))) - exp(lambda * (initial_time - tree.nodeAge(tree.parent(i))))) / (lambda * tree.branchLength(i)) )
    branch_rates[i] := ifelse(is_time_dependent == 0, sigma2, sigma2 * (exp(lambda * (initial_time - tree.nodeAge(i))) - exp(lambda * (initial_time - tree.nodeAge(tree.parent(i))))) / (lambda * tree.branchLength(i)) )
}

##########################
# Specify the BM process #
##########################

X ~ dnPhyloBrownianREML(tree, branchRates=branch_rates^0.5)
X.clamp(data)


#############
# The Model #
#############

mymodel = model(sigma2)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/BM_ACDC_RJ.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, sigma2, is_time_dependent, real_lambda) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")


### run the MCMC ###
mymcmc.burnin(generations=1000, tuningInterval=100)
mymcmc.run(generations=50000)

## quit ##
q()
