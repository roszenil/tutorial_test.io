################################################################################
# Bayesian inference of branch lengths using a Jukes-Cantor substitution model
# on a single alignment, with a fixed tree topology.

num_generations = 30000
data_dir = "data/"
aln_file = "alignment.fasta"
tree_file = "substitution.tree"

################################################################################
# Sequence data.

data = readDiscreteCharacterData(data_dir+aln_file)
print ("\n\tRead alignment")

# Get some useful variables from the data. We need these later on.
taxa <- data.taxa()

moves    = VectorMoves()
monitors = VectorMonitors()

################################################################################
# Substitution Model.

Q <- fnJC(4)

################################################################################
# Tree model.

tree <- readBranchLengthTrees(data_dir + tree_file)[1]
num_branches <- tree.nnodes() - 1

# Branch length prior.
for (i in 1:num_branches) {
    bl[i] ~ dnExponential(10.0)
    moves.append( mvScale(bl[i], lambda=0.1, tune=FALSE) )
    moves.append( mvScale(bl[i], lambda=1.0, tune=FALSE) )
    moves.append( mvScale(bl[i], lambda=10, tune=FALSE) )
}
TL := sum(bl)

psi := treeAssembly(tree, bl)

################################################################################
# PhyloCTMC Model.

seq ~ dnPhyloCTMC(tree=psi, Q=Q, type="DNA")
seq.clamp(data)

################################################################################
# Analysis.

# Monitors.
monitors.append( mnScreen(TL, printgen=100) )
monitors.append( mnFile(psi, filename="output/" + aln_file+".trees", printgen=10) )
monitors.append( mnModel(filename="output/" + aln_file+".log", printgen=10) )

print(data.names())
print(psi.names())

mymodel = model(psi)
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.run(generations = num_generations)

################################################################################
# Post processing.

treetrace = readTreeTrace("output/" + aln_file+".trees", treetype="non-clock")
map_tree = mapTree(treetrace, "output/" + aln_file + ".tree")

q()
