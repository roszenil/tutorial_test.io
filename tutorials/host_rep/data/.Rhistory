graph
plot(graph)
list <- list()
for(i in iterations){
matrix <- matrix(nrow = 67, ncol = 25, data = NA)
for(node in 1:67){
state <- hist %>%
filter(iteration == i) %>%
filter(node_index == node -1)
matrix[node,] <- as.numeric(unlist(strsplit(state$end_state, "")))
}
colnames(matrix) <- host_tree$tip.label
row.names(matrix) <- paste0("node",0:66)
list[[which(iterations == i)]] <- matrix
}
el_all <- tibble()
for(s in 1:length(list)){
graph <- graph_from_incidence_matrix(list[[s]], weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
View(el_all)
phylop <- host_tree$tip.label
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(samples)) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
# Everything
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
View(p_el)
View(el_all)
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(list)) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
View(el_all)
View(el_all)
el_all <- tibble()
for(s in 1:length(list)){
graph <- graph_from_incidence_matrix(t(list[[s]]), weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
phylop <- host_tree$tip.label
View(el_all)
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(list)) %>%
#filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
View(p_el)
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# internal nodes
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(list)) %>%
filter(to %in% paste0("node",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Calculate probabilities ----
el_all <- tibble()
for(s in 1:length(samples)){
graph <- graph_from_incidence_matrix(samples[[s]], weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
phylop <- host_tree$tip.label
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(samples)) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
# Everything
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
length(samples)
f_burn = 0
n_skip = 5
beast_fn = make_fake_beast( phy_fn, f_burn )
phy_list <- read.beast( file = beast_fn )
phy <- phy_list[[1]]@phylo
phy
samples <- list()
for(s in 1:length(phy_list)){
data <- phy_list[[s]]@data %>%
dplyr::select(index, nd, node) %>%  # error when select is masked
arrange(index)
matrix <- matrix(nrow = nhosts)
for(i in 1:nrow(data)){
col <- as.matrix(data$nd[[i]])
matrix <- cbind(matrix, col)
}
matrix <- matrix[,-1]
colnames(matrix) <- c(rev(phy$tip.label), paste0("index",34:66))
row.names(matrix) <- hosts
samples[[s]] <- matrix
}
length(samples)
str(samples)
# Calculate probabilities ----
el_all <- tibble()
for(s in 1:length(samples)){
graph <- graph_from_incidence_matrix(samples[[s]], weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
phylop <- host_tree$tip.label
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(samples)) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
# Everything
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
el_all <- tibble()
for(s in 1:length(list)){
graph <- graph_from_incidence_matrix(t(list[[s]]), weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
# internal nodes
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(list)) %>%
filter(to %in% paste0("node",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
tips <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(list)) %>%
filter(to %in% paste0("node",0:33)) %>%
ungroup() %>%
mutate(from = factor(from, levels = phylop))
p_el1 <- filter(tips, weight == 1)
p_el2 <- filter(tips, weight == 2)
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
View(last)
View(history_dat)
tip_data <- filter(history_dat, end_time == 0)
View(history_dat)
tip_data <- filter(history_dat, branch_end_time == 0)
View(tip_data)
tip_data <- filter(history_dat, branch_end_time == 0) %>%
group_by(iteration, node_index) %>%
top_n(1, new) %>%
arrange(iteration, node_index)
View(tip_data)
tip_data <- filter(history_dat, branch_end_time == 0) %>%
group_by(iteration, node_index) %>%
top_n(1, transition_time) %>%
arrange(iteration, node_index)
View(tip_data)
df <- tibble(
group = c(1:2, 1),
item_id = c(1:2, 2),
item_name = c("a", "b", "b"),
value1 = 1:3,
value2 = 4:6
)
?complete
df
df %>% complete(group, nesting(item_id, item_name))
colnames(p_el)
complete(p_el, from, to, weight, p, fill = list(p = 0))
complete(p_el, from, to, weight, p, fill = list(p = 0)) -> full
View(full)
67*25
complete(p_el1, from, to, p, fill = list(p = 0)) -> full
View(p_el1)
complete(p_el, from, to, weight, p) -> full
View(full)
complete(p_el, from, to, weight) -> full
complete(p_el1, from, to) -> full
View(full)
complete(p_el1, from, to, fill = list(p = 0)) -> full
View(full)
library(tidyverse)
library(ggtree)
library(treeio)
library(igraph)
# make fake Beast file
make_fake_beast = function(fn, f_burn) {
dat = read.table(fn, sep="\t", header=T, stringsAsFactors = F)
phy_str = dat$Tree
#return(dat)
n_phy = length(phy_str)
n_burn = ceiling(max(1, f_burn * n_phy))
out_str = c()
out_str = c(out_str, "#NEXUS")
out_str = c(out_str, "Begin trees;")
for (i in n_burn:n_phy) {
#print(phy_str[i])
out_str = c(out_str, paste("\ttree TREE",i,"=[&R]",phy_str[i],sep=""))
}
out_str = c(out_str,"End;")
beast_fn = paste(fn, ".beast.tre", sep="")
file_conn = file(beast_fn)
writeLines( out_str, file_conn )
close(file_conn)
return(beast_fn)
}
load("~/Box Sync/PhD/Project3/ongoing/for_manuscript/inference_on_servers/Tetralith/host-repertoire/output/empirical/NEWdata/char_hist_NEWdata-2s.RData")
samples <- samples_2s
setwd("~/repos/revbayes.github.io-fork/tutorials/host_rep/data")
host_tree <- read.tree("angio_25tips_origin.phy")
nhosts <- Ntip(host_tree)
hosts <- host_tree$tip.label
phy <- read.tree("Nymphalini.phy")
# Calculate probabilities ----
el_all <- data_frame()
for(s in 1:length(samples)){
graph <- graph_from_incidence_matrix(samples[[s]], weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
length(samples)
el_all <- tibble()
for(s in 1:500){
graph <- graph_from_incidence_matrix(samples[[s]], weighted = TRUE)
el <- get.data.frame(graph, what = "edges")
el <- mutate(el, sample = s)
el_all <- bind_rows(el_all, el)
}
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/500) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup()
# separate potential and actual hosts
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
# plot potential interactions as tiles and actual interactions as points
filter(p_el1, weight > 0.95) %>%
mutate(from = factor(from, levels = hosts)) %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
filter(p_el1, weight > 0.95) %>%
mutate(from = factor(from, levels = hosts)) %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
filter(p_el1, weight > 0.9) %>%
# mutate(from = factor(from, levels = hosts)) %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = filter(p_el2, p > 0.9), aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# edge list of interactions between hosts and internal nodes of the parasite tree
# for each host-parasite combination, we have the probability of a potential and actual interaction
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(samples)) %>%
filter(to %in% paste0("index",34:66)) %>%
mutate(from = factor(from, levels = hosts)) %>%
ungroup()
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/length(samples)) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = hosts))
p_el <- group_by(el_all, from, to, weight) %>%
summarise(p = n()/500) %>%
filter(to %in% paste0("index",34:66)) %>%
ungroup() %>%
mutate(from = factor(from, levels = hosts))
# separate potential and actual hosts
p_el1 <- filter(p_el, weight == 1)
p_el2 <- filter(p_el, weight == 2)
# plot potential interactions as tiles and actual interactions as points
filter(p_el1, weight > 0.9) %>%
# mutate(from = factor(from, levels = hosts)) %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = filter(p_el2, p > 0.9), aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
filter(p_el1, p > 0.9) %>%
# mutate(from = factor(from, levels = hosts)) %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = filter(p_el2, p > 0.9), aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p_el2 <- filter(p_el, weight == 2, p > 0.9)
p_el1 %>%
ggplot(aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p_el1 %>%
ggplot(aes(x = from, y = to,fill = p)) +
geom_tile() +
geom_point(data = p_el2, size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(fill = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(color = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(color = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") + scale_col_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(color = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") + scale_color_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plot potential interactions as tiles and actual interactions as points
ggplot(p_el1, aes(x = from, y = to)) +
geom_tile(aes(fill = p)) +
geom_point(data = p_el2, aes(alpha = p), size = 3) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_fill_gradient(low = "grey90", high = "grey10") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 270, hjust = 0, size = 9),
axis.text.y = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank())
phy
