################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   constant-rate pure-birth model
#
#
# authors: Sebastian Hoehna and Tracy A. Heath
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

T <- readTrees("data/primates_tree.nex")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


######################
# birth-death model  #
######################

### the birth rate is a stochastic random variable drawn from a uniform prior
birth_rate ~ dnUniform(0,100.0)
death_rate ~ dnUniform(0,100.0)

### MCMC samples this variable using a scale proposal
moves.append( mvScale(birth_rate,lambda=1.0,tune=true,weight=3.0) )
moves.append( mvScale(death_rate,lambda=1.0,tune=true,weight=3.0) )

up_down_scale = mvUpDownScale(weight=3.0)
up_down_scale.addVariable( birth_rate, up=TRUE )
up_down_scale.addVariable( death_rate, up=TRUE )
moves.append( up_down_scale )


### rho is the probability of sampling species at the present
### fix this to 233/367, since there are ~367 described species of primates
### and we have sampled 367
rho <- T.ntips()/367

### the BDP is conditioned on the root time, we can get this value from our tree and set a constant node
root_time <- T.rootAge()

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
timetree ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(birth_rate)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/primates_BD.log",printgen=10, separator = TAB) )
monitors.append( mnScreen(printgen=1000, birth_rate, death_rate) )



################
# The Analysis #
################

### compute power posterior distributions
pow_p = powerPosterior(mymodel, moves, monitors, "output/BD_powp.out", cats=127, sampleFreq=10)
pow_p.burnin(generations=10000,tuningInterval=200)
pow_p.run(generations=10000)

### Use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file="output/BD_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

### Use path-sampling to calculate marginal likelihoods
ps = pathSampler(file="output/BD_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal()




## quit ##
q()
