############################################################
# Uncorrelated exponential model on molecular branch rates #
############################################################

# The rate along each branch is drawn from an exponential prior #
branch_rates_mean ~ dnExponential(10.0)

# Transform the branch rate mean into a log of the branch rate mean
ln_branch_rates_mean := ln( branch_rates_mean )

# The mean will be operated on by a scale move #
moves.append( mvScale(branch_rates_mean, lambda=0.5, tune=true, weight=1.0) )

# Get the number of branches in the tree #
n_branches <- 2 * n_taxa - 2

# Create a vector of stochastic nodes #

# Each element in the vector represents a branch rate #
# The indices of the vector correspond to branch indices in the tree #
# Using a for-loop, initialize the branch rates and assign a move to each one #
NUM_CATEGORIES = 10
branch_rate_categories := fnDiscretizeDistribution( dnLognormal(ln_branch_rates_mean,sd=0.587405), NUM_CATEGORIES)
for(i in 1:n_branches){
    branch_rates[i] ~ dnMixture( branch_rate_categories, p=simplex(rep(1,NUM_CATEGORIES)) )
    moves.append( mvMixtureAllocation(branch_rates[i], weight=1.0) )
}

