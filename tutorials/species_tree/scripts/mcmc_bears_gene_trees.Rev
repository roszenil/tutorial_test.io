################################################################################
#
# RevBayes Example: Species tree inference using partitioned sequences.
#
# 
# This file: specifies a single substitution model for all genes concatenated
#
# authors: Sebastian Hoehna and Bastien Boussau
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######
# read in each data matrix together which will create a vector of objects
data = readDiscreteCharacterData("data/")

# Now we get some useful variables from the data. We need these later on.
num_loci = data.size()

# get the number of species
num_species <- data[1].ntaxa()
# get the taxon information (e.g. the taxon names)
num_branches <- 2 * num_species - 1 # number of branches in a rooted tree


moves = VectorMoves()
monitors = VectorMonitors()


###################
# Gene-Tree model #
###################


# We assume independent gene trees.

for (i in 1:num_loci) {

   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes,
   # allowing 1 parameter per branch of the species tree, the same line would work.
   gene_tree[i] ~ dnUniformTimeTree(rootAge=1.0, taxa=data[i].taxa())

    # moves on each gene tree
    moves.append( mvNNI(gene_tree[i], weight=num_species/2.0) )
    moves.append( mvNarrow(gene_tree[i], weight=num_species/10.0) )
    moves.append( mvFNPR(gene_tree[i], weight=num_species/10.0) )
#    moves.append( mvGPR(gene_tree[i], weight=num_species/50.0) )
    moves.append( mvSubtreeScale(gene_tree[i], weight=num_species/10.0) )
    moves.append( mvTreeScale(gene_tree[i], 1.0, true, weight=3.0) )
    moves.append( mvNodeTimeSlideUniform(gene_tree[i], weight=num_species) )

}



###############
# Clock Model #
###############

for (i in 1:num_loci) {

    clock_rate[i] ~ dnUniform( 0, 1E2 )
    clock_rate[i].setValue( 1E-4 )
    
    moves.append( mvSlide(clock_rate[i], delta=0.01, weight=1.0) )
    
}

######################
# Substitution Model #
######################


for (i in 1:num_loci) {

    #### specify the GTR substitution model applied uniformly to all sites ###
    pi_prior[i] <- v(1,1,1,1) 
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves.append( mvBetaSimplex(pi[i],weight=2) )
    moves.append( mvDirichletSimplex(pi[i],weight=1) )


    er_prior[i] <- v(1,1,1,1,1,1) 
    er[i] ~ dnDirichlet(er_prior[i])
    moves.append( mvBetaSimplex(er[i],weight=3) )
    moves.append( mvDirichletSimplex(er[i],weight=1) )


    #### create a deterministic variable for the rate matrix ####
    Q[i] := fnGTR(er[i],pi[i]) 

}





#############################
# Among Site Rate Variation #
#############################


for (i in 1:num_loci) {

#    alpha[i] ~ dnUniform( 0, 1E8 )
#    alpha[i].setValue( 1.0 )
#    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )
#
#    # add move for the shape parameter
#    moves.append( mvScale(alpha[i],weight=2) )


    p_inv[i] ~ dnBeta(1,1)

    # add move for the proportion of invariant sites parameter
    moves.append( mvBetaProbability(p_inv[i],weight=2) )
    
}


###################
# PhyloCTMC Model #
###################


for (i in 1:num_loci) {

    # the sequence evolution model
    seq[i] ~ dnPhyloCTMC(tree=gene_tree[i], Q=Q[i], branchRates=clock_rate[i], pInv=p_inv[i], type="DNA")

    # attach the data
    seq[i].clamp(data[i])

}



#############
# THE Model #
#############

# We get a handle on our model.
# We can use any node of our model as a handle, here we choose to use the topology.
mymodel = model( gene_tree )

# Monitors to check the progression of the program
monitors.append( mnScreen(printgen=100) )
monitors.append( mnModel(filename="output/bears_gene_trees.log",printgen=1, separator = TAB) )

for (i in 1:num_loci) {
    monitors.append( mnFile(filename="output/bears_gene_"+i+".trees",printgen=10, separator = TAB, gene_tree[i]) )
}


# Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
# or use mcmcmc with heated chains.
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# This should be sufficient to obtain enough MCMC samples
mymcmc.run(generations=10000,tuningInterval=100)

# let's see how the MCMC moves performed
mymcmc.operatorSummary()


for (i in 1:num_loci) {
    gene_treetrace[i] = readTreeTrace("output/bears_gene_"+i+".trees", treetype="clock")
    map_gene_tree[i] = mapTree(gene_treetrace[i],"output/bears_gene_MAP_"+i+".tree")
}



# you may want to quit RevBayes now
q()

