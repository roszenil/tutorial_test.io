################################################################################
#
# RevBayes Analysis: Bayesian inference of dN/dS rates.
#                    
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

data = readDiscreteCharacterData("data/TF105351.Eut.3.phy")
data_codon = data.translateCharacters("Codon")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
taxa <- data.taxa()

num_data_subsets = data.size()

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()



##############
# Tree model #
##############

# work under fixed topology
psi <- readTrees("data/TF105351.Eut.3.53876.tree")[1]


######################
# Substitution Model #
######################

# the transition/transversion rate ratio
kappa ~ dnLognormal(0,1)
moves.append( mvSlide(kappa, delta=1.0, tune=true, weight=2.0) )

# the nucleotide stationary frequencies
pi ~ dnDirichlet( rep(1,4) )
moves.append( mvBetaSimplex(pi, alpha=1.0, tune=true, weight=2.0) )
moves.append( mvDirichletSimplex(pi, alpha=1.0, tune=true, weight=2.0) )

# purifying selection
omega_negative ~ dnBeta(1,1)
moves.append( mvSlide(omega_negative, delta=1.0, tune=true, weight=2.0) )
Q_negative := fnCodonHKY( omega_negative, kappa, pi )

# neutral selection
omega_neutral <- 1.0
Q_neutral := fnCodonHKY( omega_neutral, kappa, pi )

# positive selection
omega_positive ~ dnExponential(1.0, offset=1.0)
moves.append( mvSlide(omega_positive, delta=1.0, tune=true, weight=2.0) )
Q_positive := fnCodonHKY( omega_positive, kappa, pi )

Q := [Q_negative, Q_neutral, Q_positive]

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteMatrices=simplex(rep(1,Q.size())), type="Codon")

# attach the data
seq.clamp(data_codon)


#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(psi)



monitors.append( mnModel(filename="output/dNdS_site.log",printgen=10, separator = TAB) )
monitors.append( mnScreen(printgen=100, omega_negative, omega_neutral, omega_positive) )

#mymcmc = mcmcmc(mymodel, monitors, moves, nchain=4, nruns=10)
mymcmc = mcmc(mymodel, monitors, moves, nruns=2)

mymcmc.run(generations=10000,tuningInterval=200)


# you may want to quit RevBayes now
q()

