# filenames
range_fn = "data/n6/silversword.n6.range.nex"
mol_fn   = "data/n6/silversword.mol.nex"
phy_fn   = "data/n6/silversword.tre"
out_fn   = "output/simple_phyxx"
geo_fn   = "data/n6/hawaii.n6"
times_fn = geo_fn + ".times.txt"
dist_fn  = geo_fn + ".distances.txt"

n_gen = 25000

########
# data #
########

# read molecular data
dat_mol = readDiscreteCharacterData(mol_fn)

# read binary (01) presence-absence range data
dat_range_01 = readDiscreteCharacterData(range_fn)
n_areas <- dat_range_01.nchar()

# determine the number of states
max_areas <- 2
n_states <- 0
for (k in 0:max_areas) n_states += choose(n_areas, k)

# convert binary ranges into NaturalNumbers
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC", n_states)

# epoch times
time_bounds <- readDataDelimitedFile(file=times_fn, delimiter=" ")
n_epochs <- time_bounds.nrows()

# area distances
distances <- readDataDelimitedFile(file=dist_fn, delimiter=" ")

# tree
phy_init = readTrees(phy_fn)[1]

# taxa
taxa = dat_mol.taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2

# get the converted state descriptions
state_desc = dat_range_n.getStateDescriptions()

# write the state descriptions to file
state_desc_str = "state,range\n"
for (i in 1:state_desc.size())
{
    state_desc_str += (i-1) + "," + state_desc[i] + "\n"
}
write(state_desc_str, file=out_fn+".state_labels.txt")

# create moves and monitors
moves = VectorMoves()
monitors = VectorMonitors()

###############
# Tree models #
###############

# root age
root_age ~ dnUniform(0, 15)
moves.append( mvScale(root_age, weight=5) )

# proportion of sampled tips
rho <- 35 / 50

# birth rate
birth ~ dnExp(10)
moves.append( mvScale(birth, weight=2) )

# death rate
death ~ dnExp(10)
moves.append( mvScale(death, weight=2) )

# birth-death process
tree ~ dnBDP(lambda=birth, mu=death, rho=rho, rootAge=root_age, taxa=taxa)

# provide a starting tree (not essential)
tree.setValue(phy_init)
root_age.setValue(phy_init.rootAge())

# tree moves
moves.append( mvNNI(tree, weight=n_branches/2) )
moves.append( mvFNPR(tree, weight=n_branches/8) )
moves.append( mvNodeTimeSlideUniform(tree, weight=n_branches/2) ) 
moves.append( mvSubtreeScale(tree, weight=n_branches/8) )
moves.append( mvTreeScale(tree, root_age, weight=n_branches/8) )


###################
# Molecular model #
###################

# molecular clock
rate_mol ~ dnLognormal(1e-6, 1e0)
rate_mol.setValue(1e-2)
moves.append( mvScale(rate_mol, lambda=0.2, weight=4) )
moves.append( mvScale(rate_mol, lambda=1.0, weight=2) )

# relaxed clock
branch_sd <- 1.0
branch_mean <- 0 - 0.5*branch_sd^2
for (i in 1:n_branches) {
    branch_rate_multiplier[i] ~ dnLognormal(mean=branch_mean, sd=branch_sd)
    branch_rates[i] := rate_mol * branch_rate_multiplier[i]
    moves.append( mvScale(branch_rate_multiplier[i]) )
}
moves.append( mvVectorScale(branch_rate_multiplier, weight=3) )

# HKY substitution process
kappa ~ dnGamma(2,2)
moves.append( mvScale(kappa) )

bf ~ dnDirichlet( [1,1,1,1] )
moves.append( mvSimplex(bf, alpha=10, weight=2) )

Q_mol := fnHKY(kappa, bf)


# +Gamma-4 among site rate variation
alpha ~ dnUniform(0,50)
moves.append( mvScale(alpha) )
site_rates := fnDiscretizeGamma(alpha, alpha, numCats=4)

# substitution process over phylogeny
seq_mol ~ dnPhyloCTMC(Q=Q_mol,
                      tree=tree,
                      branchRates=branch_rates,
                      siteRates=site_rates,
                      type="DNA",
                      nSites=dat_mol.nchar())

# observe multiple sequence alignemnt
seq_mol.clamp(dat_mol)

#######################
# Biogeography models #
#######################

# anagenetic event rate scaler
rate_bg ~ dnLoguniform(1e-4, 1e2)
rate_bg.setValue(1e-2)
moves.append( mvScale(rate_bg, lambda=0.2, weight=4) )
moves.append( mvScale(rate_bg, lambda=1.0, weight=2) )

# the relative dispersal rate
dispersal_rate <- 1.0

# the relative extirpation rate
log_sd <- 0.5
log_mean <- ln(1) - 0.5*log_sd^2
extirpation_rate ~ dnLognormal(mean=log_mean, sd=log_sd)
moves.append( mvScale(extirpation_rate, weight=2) )

# the relative dispersal and extirpation rate matrices
for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        er[i][j] <- 1.0 
        dr[i][j] := dispersal_rate
    }
    er[i][i] := extirpation_rate
}

# build DEC rate matrices
Q_DEC := fnDECRateMatrix(dispersalRates=dr,
                         extirpationRates=er,
                         maxRangeSize=max_areas)
    
# build cladogenetic transition probabilities
clado_event_types <- [ "s", "a" ]
clado_event_probs <- simplex(1,1)
P_DEC := fnDECCladoProbs(eventProbs=clado_event_probs,
                         eventTypes=clado_event_types,
                         numCharacters=n_areas,
                         maxRangeSize=max_areas)

# root frequencies
rf_DEC_tmp <- rep(1, n_states)
rf_DEC     <- simplex(rf_DEC_tmp)

# the phylogenetic CTMC with cladogenetic events
m_bg ~ dnPhyloCTMCClado(tree=tree,
                           Q=Q_DEC,
                           cladoProbs=P_DEC,
                           branchRates=rate_bg,
                           rootFrequencies=rf_DEC,
                           type="NaturalNumbers",
                           nSites=1)

# attach the range data    
m_bg.clamp(dat_range_n)

# build the epoch times
# NOTE: we do not use an epoch model, but we're still interested in when the islands originated
for (i in 1:n_epochs) {
    time_max[i] <- time_bounds[i][1]
    time_min[i] <- time_bounds[i][2]

    if (i == n_epochs) {
        epoch_times[i] <- 0.0
    } else {
        epoch_times[i] ~ dnUniform(time_min[i], time_max[i])
        epoch_width <- time_bounds[i][1] - time_bounds[i][2]
        moves.append( mvSlide(epoch_times[i], delta=epoch_width/2) )
    }
}



############
# Monitors #
############

# monitor the age of the silversword ingroup
ingroup_clade <- clade("Wilkesia_hobdyi",
                       "Dubautia_reticulata",
                       "Dubautia_microcephala",
                       "Argyroxiphium_caliginis")

ingroup_age := tmrca(tree, ingroup_clade)
for (i in 1:n_epochs) {
    ingroup_older_island[i] := ifelse( ingroup_age > epoch_times[i], 1, 0 )
}


# print to screen
monitors.append( mnScreen(printgen=100, ingroup_age) )
# monitor parameters
monitors.append( mnModel(file=out_fn+".model.log", printgen=100) )
# monitor tree
monitors.append( mnFile(tree, filename=out_fn+".tre", printgen=100) )
# monitor ancestral states
monitors.append( mnJointConditionalAncestralState(tree=tree,
                                                  ctmc=m_bg,
                                                  type="NaturalNumbers",
                                                  withTips=true,
                                                  withStartStates=true,
                                                  filename=out_fn+".states.log",
                                                  printgen=100) )
# monitor stochastic mappings
monitors.append( mnStochasticCharacterMap(ctmc=m_bg,
                                          filename=out_fn+".stoch.log",
                                          printgen=100) )

############
# Analysis #
############

# build the model analysis object from the model graph
mymodel = model(m_bg, ingroup_older_island, epoch_times)

# create the MCMC analysis object
mymcmc = mcmc(mymodel, monitors, moves)

# run the MCMC analysis
mymcmc.run(n_gen)

# exit
quit()
