################################################################################
#
# RevBayes Example: Inferring ancestral states and rates of morphological evolution
# 
# This file: Runs the full reversible-jump MCMC on an irreversible model.
#
# authors:  Sebastian Höhna, Will Freyman, April M. Wright, Michael J. Landis
#
################################################################################

#######################
# Reading in the Data #
#######################

# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #
morpho <- readDiscreteCharacterData("data/mammals_thinned_placenta_type.nex")

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()



##############
# Tree model #
##############

# Here we use a fixed tree topology of mammals on a family level sampling
# Note that the readTrees function always returns a vector of trees, 
# so we simple take the first tree
phylogeny <- readTrees("data/mammals_thinned.tree")[1]


#########################
# Set up the rate model #
#########################

# we assume every rate i <-> j to be either
# (a) independent and exponentially distributed, or
# (b) 0.0

rate_pr := phylogeny.treeLength() / 10
mix_pr <- 0.5

rate_12 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)
rate_13 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)
rate_21 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)
rate_23 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)
rate_31 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)
rate_32 ~ dnRJMixture(0.0, dnExp(rate_pr), p=mix_pr)

prob_rate_12 := ifelse( rate_12 == 0, 1.0, 0.0 )
prob_rate_13 := ifelse( rate_13 == 0, 1.0, 0.0 )
prob_rate_21 := ifelse( rate_21 == 0, 1.0, 0.0 )
prob_rate_23 := ifelse( rate_23 == 0, 1.0, 0.0 )
prob_rate_31 := ifelse( rate_31 == 0, 1.0, 0.0 )
prob_rate_32 := ifelse( rate_32 == 0, 1.0, 0.0 )

moves.append( mvRJSwitch( rate_12, weight=2 ) )
moves.append( mvRJSwitch( rate_13, weight=2 ) )
moves.append( mvRJSwitch( rate_21, weight=2 ) )
moves.append( mvRJSwitch( rate_23, weight=2 ) )
moves.append( mvRJSwitch( rate_31, weight=2 ) )
moves.append( mvRJSwitch( rate_32, weight=2 ) )

moves.append( mvScale( rate_12, weight=2 ) )
moves.append( mvScale( rate_13, weight=2 ) )
moves.append( mvScale( rate_21, weight=2 ) )
moves.append( mvScale( rate_23, weight=2 ) )
moves.append( mvScale( rate_31, weight=2 ) )
moves.append( mvScale( rate_32, weight=2 ) )


##########################
# Set up the rate matrix #
##########################

Q_morpho := fnFreeK( [ rate_12, rate_13, rate_21, rate_23, rate_31, rate_32 ], rescale=false )



#####################################
# Set up the root state frequencies #
#####################################

rf_prior <- [1,1,1]
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )



###################
# Set up the CTMC #
###################

# Combine all of our elements into a CTMC.

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="Standard")
phyMorpho.clamp(morpho)



########
# MCMC #
########

# initialize the model object #
mymodel = model(phylogeny)
# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/freeK_RJ.log", printgen=1) )
# 2. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100) )
# 3. add an ancestral state monitor
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                   ctmc=phyMorpho,
                                                   filename="output/freeK_RJ.states.txt",
                                                   type="Standard",
                                                   printgen=1,
                                                   withTips=true,
                                                   withStartStates=false) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=5000, tuningInterval=200)

# check the performance of the MCMC/moves
mymcmc.operatorSummary()


# Read in the tree trace and construct the ancestral states (ASE) #
anc_states = readAncestralStateTrace("output/freeK_RJ.states.txt")
anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/ase_freeK_RJ.tree", burnin=0.25, summary_statistic="MAP", site=1)

# Quit RevBayes #
q()
